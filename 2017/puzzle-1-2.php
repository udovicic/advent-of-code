<?php

/**
 * --- Day 1: Inverse Captcha ---
 * --- Part Two --
 *
 * You notice a progress bar that jumps to 50% completion. Apparently, the door
 * isn't yet satisfied, but it did emit a star as encouragement. The
 * instructions change:
 *
 * Now, instead of considering the next digit, it wants you to consider the
 * digit halfway around the circular list. That is, if your list contains 10
 * items, only include a digit in your sum if the digit 10/2 = 5 steps forward
 * matches it. Fortunately, your list has an even number of elements.
 *
 * For example:
 * 1212 produces 6: the list contains 4 items, and all four digits match the
 *      digit 2 items ahead.
 * 1221 produces 0, because every comparison is between a 1 and a 2.
 * 123425 produces 4, because both 2s match each other, but no other digit
 *      has a match.
 * 123123 produces 12.
 * 12131415 produces 4.
 * What is the solution to your new captcha?
 */

// Generated input
$input = '616976379622766413664422972473671177381147198634736481319824497286881'
    . '167286958665729895244733929829639764111476835884158782141899961635335845'
    . '471757941581181487242988327988983333997865614591526441446699598873414819'
    . '683191729873579897857913667328499327883437721121766147238584749599197138'
    . '553988769564276313541726681335498455856322119355736621813316131378698666'
    . '932593743221698116836353253215972428893581471233581177749146537873713685'
    . '747843767216521817923716352883767297849675268249151925267449351879895713'
    . '477462221136255779634761419231875346584456155969876143859115139392922572'
    . '637235187748881746359632546247696845335314437457293443419737464693268381'
    . '862484484835874775632858674999564462187752323743834339218359931364633836'
    . '288611155731428543589432911487662996536331955821359345449646576631983877'
    . '944424435319646151696552436526967824433946391696878474637215855279478399'
    . '921824153931999648936583227576346752744229932379553541851948686384548914'
    . '428939356944543242359681559139632826426499681532846261541114783899143167'
    . '657834343654583527858688955824883123349313179356694534474789369385336699'
    . '211654373737414483784773918127799715289754782986887549392164214292517275'
    . '555964819433222662895279966728563876486741669977313425589865752587932619'
    . '868171774871975122821629641671512594857448358545475133413226477326624435'
    . '122518867718876516141776792299842711912923747559154573727758561785399651'
    . '313195682782523262426151514127722542578474137998114172874813217453728795'
    . '137662357453478726329467765381736673712289772121439963916179743679234399'
    . '237743885238455897693413511673113987877975835434347253743436117243793995'
    . '661974321541468813445283198264345542393736669625462712997177435912255675'
    . '646555113532551975165152139638623837622589599574747897185647588433673257'
    . '945898868524133147136989118551837789787225587423294298672392614647736463'
    . '894843184465743753236741366384521738151767323854686752152647367862428662'
    . '956489973654126374996928177479379826285189263819392799359937124189385674'
    . '88289246779458432179335139731952167527521377546376518126276';

$circle = $input . $input; // List is circular, but we need to go only one round
$sanitized = []; // Place holder for sanitized list

$step = strlen($input) / 2;
for ($i=0; $i < strlen($input); $i++) {
    $a = $circle[$i];
    $b = $circle[$i + $step];

    if ($a === $b) $sanitized[] = $a; // push to stack
}

$result = array_sum($sanitized);

echo 'Result is ' . $result . PHP_EOL;